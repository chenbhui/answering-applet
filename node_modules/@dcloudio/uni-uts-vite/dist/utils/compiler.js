"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parsePackage = exports.compile = exports.getUtsCompiler = void 0;
const os_1 = __importDefault(require("os"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const adm_zip_1 = __importDefault(require("adm-zip"));
const fast_glob_1 = require("fast-glob");
const uni_cli_shared_1 = require("@dcloudio/uni-cli-shared");
const shared_1 = require("@vue/shared");
function getUtsCompiler() {
    // eslint-disable-next-line no-restricted-globals
    return require('@dcloudio/uts');
}
exports.getUtsCompiler = getUtsCompiler;
async function compile(filename) {
    if (!process.env.UNI_HBUILDERX_PLUGINS) {
        return;
    }
    const { bundle, UtsTarget } = getUtsCompiler();
    const inputDir = process.env.UNI_INPUT_DIR;
    const outputDir = process.env.UNI_OUTPUT_DIR;
    // let time = Date.now()
    await bundle({
        target: UtsTarget.KOTLIN,
        input: {
            root: inputDir,
            filename,
        },
        output: {
            outDir: outputDir,
            package: parsePackage(filename),
            sourceMap: (0, uni_cli_shared_1.resolveSourceMapPath)(process.env.UNI_OUTPUT_DIR, process.env.UNI_PLATFORM),
            extname: 'kt',
            imports: [
                'kotlinx.coroutines.async',
                'kotlinx.coroutines.CoroutineScope',
                'kotlinx.coroutines.Deferred',
                'kotlinx.coroutines.Dispatchers',
                'io.dcloud.uts.*',
            ],
            logFilename: true,
            noColor: (0, uni_cli_shared_1.isInHBuilderX)(),
        },
    });
    // console.log('uts compile time: ' + (Date.now() - time) + 'ms')
    const kotlinFile = resolveKotlinFile(filename, inputDir, outputDir);
    if (process.env.NODE_ENV === 'production') {
        const androidInputDir = resolveAndroidDir(filename);
        const androidOutputDir = resolveAndroidDir(kotlinFile);
        // 拷贝所有非uts文件及目录
        fs_extra_1.default.copySync(androidInputDir, androidOutputDir, {
            filter(src) {
                return path_1.default.extname(src) !== '.uts';
            },
        });
        // 生产模式下，需要将 kt 文件转移到 src 下
        const srcDir = path_1.default.resolve(androidOutputDir, 'src');
        if (!fs_extra_1.default.existsSync(srcDir)) {
            fs_extra_1.default.mkdirSync(srcDir);
        }
        if (fs_extra_1.default.existsSync(kotlinFile)) {
            fs_extra_1.default.moveSync(kotlinFile, path_1.default.resolve(androidOutputDir, 'src/index.kt'));
        }
        const kotlinMapFile = kotlinFile + '.map';
        if (fs_extra_1.default.existsSync(kotlinMapFile)) {
            fs_extra_1.default.moveSync(kotlinMapFile, path_1.default.resolve(androidOutputDir, 'src/index.map.kt'));
        }
    }
    else if (process.env.NODE_ENV === 'development') {
        // 开发模式下，需要生成 dex
        if (fs_extra_1.default.existsSync(kotlinFile)) {
            const compilerServer = getCompilerServer();
            if (!compilerServer) {
                return;
            }
            const { getDefaultJar, getKotlincHome, compile } = compilerServer;
            // time = Date.now()
            const jarFile = resolveJarPath(kotlinFile);
            const options = {
                kotlinc: resolveKotlincArgs(kotlinFile, getKotlincHome(), getDefaultJar().concat(resolveLibs(filename))),
                d8: resolveD8Args(jarFile),
            };
            const res = await compile(options, process.env.UNI_INPUT_DIR);
            // console.log('dex compile time: ' + (Date.now() - time) + 'ms')
            if (res) {
                try {
                    fs_extra_1.default.unlinkSync(jarFile);
                    // 短期内先不删除，方便排查问题
                    // fs.unlinkSync(kotlinFile)
                }
                catch (e) { }
                const dexFile = resolveDexFile(jarFile);
                if (fs_extra_1.default.existsSync(dexFile)) {
                    return (0, uni_cli_shared_1.normalizePath)(path_1.default.relative(outputDir, dexFile));
                }
            }
        }
    }
}
exports.compile = compile;
function resolveKotlincArgs(filename, kotlinc, jars) {
    return [
        filename,
        '-cp',
        resolveClassPath(jars),
        '-d',
        resolveJarPath(filename),
        '-kotlin-home',
        kotlinc,
    ];
}
function resolveD8Args(filename) {
    return [
        filename,
        '--no-desugaring',
        '--min-api',
        '19',
        '--output',
        resolveDexPath(filename),
    ];
}
function resolveLibs(filename) {
    const libsPath = path_1.default.resolve(resolveAndroidDir(filename), 'libs');
    const libs = [];
    if (fs_extra_1.default.existsSync(libsPath)) {
        libs.push(...(0, fast_glob_1.sync)('*.jar', { cwd: libsPath, absolute: true }));
        const zips = (0, fast_glob_1.sync)('*.aar', { cwd: libsPath });
        zips.forEach((name) => {
            const outputPath = resolveAndroidArchiveOutputPath(name);
            if (!fs_extra_1.default.existsSync(outputPath)) {
                // 解压
                const zip = new adm_zip_1.default(path_1.default.resolve(libsPath, name));
                zip.extractAllTo(outputPath, true);
            }
        });
        if (zips.length) {
            libs.push(...(0, fast_glob_1.sync)('*/*.jar', {
                cwd: resolveAndroidArchiveOutputPath(),
                absolute: true,
            }));
        }
    }
    return libs;
}
function resolveAndroidArchiveOutputPath(aar) {
    return path_1.default.resolve(process.env.UNI_OUTPUT_DIR, '../.uts/aar', aar ? aar.replace('.aar', '') : '');
}
function resolveDexFile(jarFile) {
    return (0, uni_cli_shared_1.normalizePath)(path_1.default.resolve(path_1.default.dirname(jarFile), 'classes.dex'));
}
function resolveAndroidDir(filename) {
    const maybeAndroidDir = path_1.default.dirname(filename);
    // 如果是根目录的index.uts编译出来的index.kt，则移动到app-android下
    const isRootIndex = path_1.default.basename(maybeAndroidDir) !== 'app-android';
    if (isRootIndex) {
        if (maybeAndroidDir.includes('uni_modules')) {
            return path_1.default.join(maybeAndroidDir, 'utssdk/app-android');
        }
        return path_1.default.join(maybeAndroidDir, 'app-android');
    }
    return maybeAndroidDir;
}
function resolveKotlinFile(filename, inputDir, outputDir) {
    let ktFile = path_1.default
        .resolve(outputDir, path_1.default.relative(inputDir, filename))
        .replace(path_1.default.extname(filename), '.kt');
    const maybeModuleDir = path_1.default.dirname(filename);
    // 如果是根目录的index.uts编译出来的index.kt，则移动到app-android下
    const isRootIndex = path_1.default.basename(maybeModuleDir) !== 'app-android';
    if (isRootIndex) {
        if (fs_extra_1.default.existsSync(ktFile)) {
            const newKtFile = path_1.default.resolve(path_1.default.dirname(ktFile), (maybeModuleDir.includes('uni_modules') ? 'utssdk/' : '') +
                'app-android/index.kt');
            fs_extra_1.default.moveSync(ktFile, newKtFile);
            ktFile = newKtFile;
        }
    }
    return ktFile;
}
function resolveDexPath(filename) {
    return path_1.default.dirname(filename);
}
function resolveJarPath(filename) {
    return filename.replace(path_1.default.extname(filename), '.jar');
}
function resolveClassPath(jars) {
    return jars.join(os_1.default.platform() === 'win32' ? ';' : ':');
}
const getCompilerServer = () => {
    try {
        const compilerServerPath = path_1.default.resolve(process.env.UNI_HBUILDERX_PLUGINS, 'uniapp-runextension/out/main.js');
        // eslint-disable-next-line no-restricted-globals
        return require(compilerServerPath);
    }
    catch (e) {
        (0, uni_cli_shared_1.installHBuilderXPlugin)('uniapp-runextension');
    }
    return false;
};
function parsePackage(filepath) {
    const parts = (0, uni_cli_shared_1.normalizePath)(filepath).split('/');
    const isUniModules = parts.includes('uni_modules');
    const index = isUniModules
        ? parts.findIndex((part) => part === 'uni_modules')
        : parts.findIndex((part) => part === 'utssdk');
    if (index > -1) {
        return ('uts.sdk.' + (isUniModules ? 'modules.' : '') + (0, shared_1.camelize)(parts[index + 1]));
    }
    return '';
}
exports.parsePackage = parsePackage;
